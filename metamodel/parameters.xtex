
AbstractParameter :
	Parameter | ConstParameter 
;

Parameter :
	type=[TypedefDeclaration] name=PARAMNAME
;

// for control structure
For : 
	(comment=COMMENT)? 		
	'for' '(' param=ForParameter ')' 
	'{'
		(actions+=Statement)*
	'}' 
;

ForParameter returns Parameter: 
	name=PARAMNAME ':' type=[TypedefDeclaration] 
;




// a primary int expression
ParamRef:
	refParam=[AbstractParameter|PARAMNAME]
;

// A constant defined as type parameter or global specification level
ConstParameter : 
	name=PARAMNAME '=' value=Integer
;

ParamDef :
	param=[ConstParameter|PARAMNAME] '=' value=Integer 
;

// instances can override const parameter values using ParamDef
InstanceDeclaration :
	type = [TypeDeclaration] name = FullyQualifiedName 
	( '(' paramDefs+=ParamDef  (',' paramDefs+=ParamDef )* ')' )? ';'
;

ArrayInstanceDeclaration :
	type = [TypeDeclaration] '[' size=INT ']'  name = FullyQualifiedName 
	( '(' paramDefs+=ParamDef  (',' paramDefs+=ParamDef )* ')' )? ';'
;

// Start with $ and build an ID
terminal PARAMNAME:
	'$'  ('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
